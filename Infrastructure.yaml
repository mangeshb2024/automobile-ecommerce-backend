AWSTemplateFormatVersion: '2010-09-09'

Description: Template to create backend infrastructure for Automobile-ECommerce project

# Metadata section
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: S3 Parameters
        Parameters:
          - sourceDataS3Bucket
          - staticDataS3Bucket
          - setupS3Bucket
      - Label:
          default: DynamoDB Parameters
        Parameters:
          - dynamoDBTableName
          - dynamoDBFilterTableName
      - Label:
          default: API Gateway Parameters
        Parameters:
          - apiGatewayName
          - apiGatewayStageName
    ParameterLabels:
      sourceDataS3Bucket:
        default: Source S3 Bucket to store input CSV file to load data in Dynamodb
          tables

# Parameters section
Parameters:
  sourceDataS3Bucket:
    Type: String
    Default: automobile-ecommerce-source-data
  staticDataS3Bucket:
    Type: String
    Default: automobile-ecommerce-static-data
  setupS3Bucket:
    Type: String
    Default: automobile-ecommerce-setup
  dynamoDBTableName:
    Type: String
    Default: automobileDataTable
  dynamoDBFilterTableName:
    Type: String
    Default: automobileFilterDataTable
  apiGatewayName:
    Type: String
    Default: automobileAPI
  apiGatewayStageName:
    Type: String
    AllowedPattern: '[a-z0-9]+'
    Default: prod

#Resources section
Resources:

  #Custom Resources
  copyAppData:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt CopyAppDataFunction.Arn
      SourceBucket: !Ref setupS3Bucket
      SourcePrefix: "AppData"
      Bucket: !Ref dataSourceS3Bucket
      StaticDataBucket: !Ref dataStaticS3Bucket


  # S3 Buckets
  dataSourceS3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: 
      - S3LambdaInvokePermission
      - loadDataFunction
      - filterTable
      - dataTable
    Properties:
      BucketName: !Ref sourceDataS3Bucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt loadDataFunction.Arn
          - Event: s3:ObjectCreated:CompleteMultipartUpload
            Function: !GetAtt loadDataFunction.Arn
          - Event: s3:ObjectCreated:Copy
            Function: !GetAtt loadDataFunction.Arn

  dataStaticS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref staticDataS3Bucket

  # S3 Lambda Trigger
  S3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: loadDataFunction
    Properties:
      FunctionName: !GetAtt loadDataFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${sourceDataS3Bucket}

  # SSM Parameters
  SSMParamDynamoDBTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /carsData/DynamoDBTableName
      Description: SSM Parameter storing DynamoDB table name.
      Tier: Standard
      Type: String
      Value: !Ref dynamoDBTableName

  SSMParamDynamoDBFilterTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /carsData/DynamoDBFilterTableName
      Description: SSM Parameter storing DynamoDB Filter table name.
      Tier: Standard
      Type: String
      Value: !Ref dynamoDBFilterTableName

  SSMParamStaticDataS3Bucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /carsData/StaticDataS3Bucket
      Description: SSM Parameter storing static assets such as images and videos.
      Tier: Standard
      Type: String
      Value: !Ref staticDataS3Bucket

  # IAM Roles
  copyAppDataExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: ReadFromBucket
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::${setupS3Bucket}"
                  - !Sub "arn:aws:s3:::${setupS3Bucket}/*"
              -
                Sid: WriteToBucket
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${dataSourceS3Bucket}"
                  - !Sub "arn:aws:s3:::${dataSourceS3Bucket}/*"
              -
                Sid: DeleteFromStaticBucket
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${dataStaticS3Bucket}"
                  - !Sub "arn:aws:s3:::${dataStaticS3Bucket}/*"

  loadDataLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM Execution Role for loadData Lambda function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      RoleName: loadDataLambdaExecRole

  fetchFiltersLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM Execution Role for fetchFilters Lambda function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      RoleName: fetchFiltersLambdaExecRole

  fetchDataLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM Execution Role for fetchCarsData Lambda function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      RoleName: fetchDataLambdaExecRole

  updateDataLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM Execution Role for updateCarsData Lambda function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      RoleName: updateDataLambdaExecRole

  # DynamoDB Tables
  filterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: filterColumn
          AttributeType: S
      KeySchema:
        - AttributeName: filterColumn
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: !Ref dynamoDBFilterTableName

  dataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: manufacturer
          AttributeType: S
        - AttributeName: vehicletype
          AttributeType: S
        - AttributeName: bodytype
          AttributeType: S
        - AttributeName: model
          AttributeType: S
        - AttributeName: engine
          AttributeType: S
        - AttributeName: fuel
          AttributeType: S
        - AttributeName: transmission
          AttributeType: S
      KeySchema:
        - AttributeName: manufacturer
          KeyType: HASH
        - AttributeName: model
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: !Ref dynamoDBTableName
      GlobalSecondaryIndexes:
        - IndexName: gsi_bodytype_model
          KeySchema:
            - AttributeName: bodytype
              KeyType: HASH
            - AttributeName: model
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_bodytype_engine
          KeySchema:
            - AttributeName: bodytype
              KeyType: HASH
            - AttributeName: engine
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_bodytype_fuel
          KeySchema:
            - AttributeName: bodytype
              KeyType: HASH
            - AttributeName: fuel
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_bodytype_transmission
          KeySchema:
            - AttributeName: bodytype
              KeyType: HASH
            - AttributeName: transmission
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_model_engine
          KeySchema:
            - AttributeName: model
              KeyType: HASH
            - AttributeName: engine
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_model_fuel
          KeySchema:
            - AttributeName: model
              KeyType: HASH
            - AttributeName: fuel
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_model_transmission
          KeySchema:
            - AttributeName: model
              KeyType: HASH
            - AttributeName: transmission
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_engine_fuel
          KeySchema:
            - AttributeName: engine
              KeyType: HASH
            - AttributeName: fuel
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_engine_transmission
          KeySchema:
            - AttributeName: engine
              KeyType: HASH
            - AttributeName: transmission
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_fuel_transmission
          KeySchema:
            - AttributeName: fuel
              KeyType: HASH
            - AttributeName: transmission
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: gsi_transmission
          KeySchema:
            - AttributeName: transmission
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
      LocalSecondaryIndexes:
        - IndexName: lsi_bodytype
          KeySchema:
            - AttributeName: manufacturer
              KeyType: HASH
            - AttributeName: bodytype
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: lsi_vehicletype
          KeySchema:
            - AttributeName: manufacturer
              KeyType: HASH
            - AttributeName: vehicletype
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: lsi_engine
          KeySchema:
            - AttributeName: manufacturer
              KeyType: HASH
            - AttributeName: engine
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: lsi_fuel
          KeySchema:
            - AttributeName: manufacturer
              KeyType: HASH
            - AttributeName: fuel
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: lsi_transmission
          KeySchema:
            - AttributeName: manufacturer
              KeyType: HASH
            - AttributeName: transmission
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Lambda Functions
  CopyAppDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies App data CSV and image files into source data bucket
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt copyAppDataExecutionRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os 
          import json
          import cfnresponse
          import boto3
          import logging

          from botocore.exceptions import ClientError
          client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            source_bucket = event['ResourceProperties']['SourceBucket']
            source_prefix = event['ResourceProperties'].get('SourcePrefix') or ''
            bucket = event['ResourceProperties']['Bucket']
            prefix = event['ResourceProperties'].get('Prefix') or ''
            static_data_bucket = event['ResourceProperties']['StaticDataBucket'] or ''
            static_data_prefix = event['ResourceProperties'].get('Static_Data_Prefix') or ''

            result = cfnresponse.SUCCESS

            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = copy_objects(source_bucket, source_prefix, bucket, prefix)
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket, source_prefix, prefix, static_data_prefix)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED

            cfnresponse.send(event, context, result, {})

          def copy_objects(source_bucket, source_prefix, bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=source_bucket, Prefix=source_prefix)
            for key in {x['Key'] for page in page_iterator for x in page['Contents']}:
              #dest_key = os.path.join(prefix, os.path.relpath(key, source_prefix))
              if not key.endswith('/'):
                #print('copy {} to {}'.format(key, dest_key))
                #client.copy_object(CopySource={'Bucket': source_bucket, 'Key': key}, Bucket=bucket, Key = dest_key)
                CopySource={'Bucket': source_bucket, 'Key': key}
                client.copy(CopySource, bucket, key)
            return cfnresponse.SUCCESS

          def delete_objects(bucket, static_data_bucket, prefix, static_data_prefix):
            paginator = client.get_paginator('list_objects_v2')
            #page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
            page_iterator = paginator.paginate(Bucket=static_data_bucket)
            objects = [{'Key': x['Key']} for page in page_iterator for x in page['Contents']]
            client.delete_objects(Bucket=static_data_bucket, Delete={'Objects': objects})
            return cfnresponse.SUCCESS

  loadDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref setupS3Bucket
        S3Key: loadCarsData.zip
      Description: A Lambda function to load data from a csv file to a DynamoDB table
      Environment:
        Variables:
          DYNAMODB_TAB_PARAM_NAME: !GetAtt SSMParamDynamoDBTable.Name #'{{resolve:ssm:/carsData/DynamoDBTableName:5}}'
          DDB_FILTER_TAB_PARAM_NAME: !GetAtt SSMParamDynamoDBFilterTable.Name
          STATIC_DATA_S3BUCKET_PARAM_NAME: !GetAtt SSMParamStaticDataS3Bucket.Name
      FunctionName: loadCarsData
      Handler: loadCarsData.lambda_handler
      PackageType: Zip
      Role: !GetAtt loadDataLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 120

  fetchFiltersFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref setupS3Bucket
        S3Key: fetchFilters.zip
      Description: A Lambda function to retrieve filters from a DynamoDB table
      Environment:
        Variables:
          DDB_FILTER_TAB_PARAM_NAME: !GetAtt SSMParamDynamoDBFilterTable.Name
      FunctionName: fetchFilters
      Handler: fetchFilters.lambda_handler
      PackageType: Zip
      Role: !GetAtt fetchFiltersLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 120

  fetchDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref setupS3Bucket
        S3Key: fetchCarsData.zip
      Description: A Lambda function to retrieve data from a DynamoDB table based on
        input parameters
      Environment:
        Variables:
          DYNAMODB_TAB_PARAM_NAME: !GetAtt SSMParamDynamoDBTable.Name
          STATIC_DATA_S3BUCKET_PARAM_NAME: !GetAtt SSMParamStaticDataS3Bucket.Name
      FunctionName: fetchCarsData
      Handler: fetchCarsData.lambda_handler
      PackageType: Zip
      Role: !GetAtt fetchDataLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 120

  updateDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref setupS3Bucket
        S3Key: updateCarsData.zip
      Description: A Lambda function to update data of a single record
      Environment:
        Variables:
          DYNAMODB_TAB_PARAM_NAME: !GetAtt SSMParamDynamoDBTable.Name
      FunctionName: updateCarsData
      Handler: updateCarsData.lambda_handler
      PackageType: Zip
      Role: !GetAtt updateDataLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 120

  # API Gateway

  #API Gateway
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API to fetch data from backend DynamodB table
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  # API Gateway Resources

  apiGatewayFiltersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: filters

  apiGatewayCarsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: cars

  # API Gateway Methods

  apiGatewayFiltersGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt fetchFiltersFunction.Arn
      ResourceId: !Ref apiGatewayFiltersResource
      RestApiId: !Ref apiGateway

  apiGatewayCarsGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt fetchDataFunction.Arn
      ResourceId: !Ref apiGatewayCarsResource
      RestApiId: !Ref apiGateway

  apiGatewayCarsPUTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt updateDataFunction.Arn
      ResourceId: !Ref apiGatewayCarsResource
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayCarsGETMethod
      - apiGatewayFiltersGETMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  apiGatewayFetchFiltersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt fetchFiltersFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/GET/filters

  apiGatewayFetchDataLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt fetchDataFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/GET/cars

  apiGatewayUpdateLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt updateDataFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/PUT/cars

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}